{"data":{"site":{"siteMetadata":{"title":"DerDrodt","author":"Daniel Drodt"}},"markdownRemark":{"id":"e0eb5ed5-dbf9-5f30-9e3e-9400bdeb5dce","excerpt":"The Basics CONFUSING When I say “Racket” here, I actually mean HtDP-TL (or  H ow  t o  D esign -  T eaching  L anguage). But no one likes to…","html":"<h2>The Basics</h2>\n<div class=\"custom-block custom-block-warning\"><div class=\"custom-block-heading\">CONFUSING</div><div class=\"custom-block-body\"><p>When I say “Racket” here, I actually mean HtDP-TL (or <strong>H</strong>ow <strong>t</strong>o <strong>D</strong>esign - <strong>T</strong>eaching <strong>L</strong>anguage). But no one likes to say, hear, or in fact read that, obviously. And since HtDP-TL and Racket are quite similiar and everyone calls it Racket anyway, I am sticking with that.</p></div></div>\n<p>Racket is a <em>functional programming language</em>, which means that in Racket (almost) everything we do is through functions.</p>\n<p>Let’s say, for example, we want to calculate <code class=\"language-text\">2 + 3</code> in Racket, becuase that task is obviously way too complex to do it by hand. We <strong>can’t</strong> just write <code class=\"language-text\">2 + 3</code> because Racket wouldn’t understand that. <code class=\"language-text\">+</code> however is a <em>function</em>, which means we can <em>call</em> it. <em>Calling</em> a function means that we let the function do its calculation and then get its result back. For that calculation functions often need data to do these calculations, numbers to add for example. These data is what we call <em>parameters</em> or <em>arguments</em>.</p>\n<p>To calculate <code class=\"language-text\">2 + 3</code> we call the <code class=\"language-text\">+</code>-function with 2 and 3 as parameters. Calling a function in Racket looks like this: <code class=\"language-text\">(name param1 param2 ...)</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n> <span class=\"token number\">5</span></code></pre></div>\n<p>So what just happened there? We called a function with the name <code class=\"language-text\">+</code>, which is predefined in the Racket language, with the parameters 2 and 3. This function then calculated this addition and <em>returned</em> it, meaning it gave us the result back.</p>\n<p>And <code class=\"language-text\">+</code> isn’t the only function Racket gives us right out of the box. There are a lot of them and we will explore a lot of them later, but here are some arithmetic functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> <span class=\"token number\">5</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n> <span class=\"token number\">2</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n> <span class=\"token number\">6</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">/</span> <span class=\"token number\">8</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n> <span class=\"token number\">2</span></code></pre></div>","frontmatter":{"date":"03 December 2018","title":"Introduction to Racket","topic":"fop"}}},"pageContext":{"slug":"/FoP/racket-intro/","previous":{"fields":{"slug":"/FoP/fop-intro/"},"frontmatter":{"title":"Introduction to FoP","topic":"fop"}},"next":{"fields":{"slug":"/MoleculeJS/intro/"},"frontmatter":{"title":"Introduction to MoleculeJS","topic":"molecule"}}}}