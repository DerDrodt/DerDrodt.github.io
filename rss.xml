<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[DerDrodt]]></title><description><![CDATA[A blog about everything web. By Daniel Drodt]]></description><link>https://DerDrodt.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Sun, 23 Dec 2018 01:05:22 GMT</lastBuildDate><item><title><![CDATA[Functions]]></title><description><![CDATA[Our own functions! Last time, we already explored how we can use functions in Racket. In this part, we explore how to create our own…]]></description><link>https://DerDrodt.github.io//fop/racket-functions/</link><guid isPermaLink="false">https://DerDrodt.github.io//fop/racket-functions/</guid><pubDate>Fri, 07 Dec 2018 22:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Our own functions!&lt;/h2&gt;
&lt;p&gt;Last time, we already explored how we can use functions in Racket. In this part, we explore how to create our own functions. How exciting!&lt;/p&gt;
&lt;p&gt;Let’s say, for example, we want to write a function that takes a number and gives back (returns) it’s square. We’ll call it &lt;code class=&quot;language-text&quot;&gt;square&lt;/code&gt;, appropriately enough.&lt;/p&gt;
&lt;p&gt;How do we define functions in Racket? By calling a function of course! The &lt;code class=&quot;language-text&quot;&gt;define&lt;/code&gt;-function to be precise.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scheme&quot;&gt;&lt;pre class=&quot;language-scheme&quot;&gt;&lt;code class=&quot;language-scheme&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;square&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; x x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alright one step at a time. As we said, to define a function, we call &lt;code class=&quot;language-text&quot;&gt;define&lt;/code&gt;. &lt;code class=&quot;language-text&quot;&gt;define&lt;/code&gt; takes two arguments, the first one is our function head, so &lt;code class=&quot;language-text&quot;&gt;(square x)&lt;/code&gt; which is first the name of the function and then it’s parameters, just x in our case. The head is basically just the way we want to use our function later. The second parameter, the function body, is what we want to return. It can be a primitive or the result of a function call or a function itself. In our case, it is &lt;code class=&quot;language-text&quot;&gt;(* x x)&lt;/code&gt; - the square of &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;custom-block custom-block-tip&quot;&gt;&lt;div class=&quot;custom-block-heading&quot;&gt;CONVENTION&lt;/div&gt;&lt;div class=&quot;custom-block-body&quot;&gt;&lt;p&gt;In Racket function, argument and variable names are all named by convention is &lt;strong&gt;kebab-case&lt;/strong&gt;. That means everything is lower-case and words are seperated with a ”-“.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now that we have our &lt;code class=&quot;language-text&quot;&gt;square&lt;/code&gt; function, we can use it like any other function.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scheme&quot;&gt;&lt;pre class=&quot;language-scheme&quot;&gt;&lt;code class=&quot;language-scheme&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&gt; &lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will always get the same result, as if we had just used &lt;code class=&quot;language-text&quot;&gt;*&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scheme&quot;&gt;&lt;pre class=&quot;language-scheme&quot;&gt;&lt;code class=&quot;language-scheme&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&gt; &lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;custom-block custom-block-tip&quot;&gt;&lt;div class=&quot;custom-block-heading&quot;&gt;TIP&lt;/div&gt;&lt;div class=&quot;custom-block-body&quot;&gt;&lt;p&gt;Racket already has this square function; it is called &lt;code class=&quot;language-text&quot;&gt;sqr&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Why is it helpful to create function? Because most functions are a bit more complex than squaring numbers and because we are less prone to errors, if we split our program up in functions. Let’s consider this example: We want to calculate the area of a circle (A = π * r&lt;sup&gt;2&lt;/sup&gt;). This is short enough, we don’t really need a function, right? Anywhere we want to use it, we just do this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scheme&quot;&gt;&lt;pre class=&quot;language-scheme&quot;&gt;&lt;code class=&quot;language-scheme&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.14&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqr&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;;; ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After a few weeks, we copied this code dozens of times across our project with over a 1000 lines of code. But later on we reaize our results are not accurate enough, because our approximation for pi is too simple. To fix this, we have to use our new approximation &lt;strong&gt;everywhere&lt;/strong&gt; we used the old one. If we miss it just once, we still aren’t accurate enough. Had we just written a function, we could have just edited it once.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scheme&quot;&gt;&lt;pre class=&quot;language-scheme&quot;&gt;&lt;code class=&quot;language-scheme&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; Much more accurate (For reference: https://www.youtube.com/watch?v=bFNjA9LOPsg)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;area-of-circle&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.2&lt;/span&gt; r r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s try something a little more complex. We want a function that calculates the absolute value of our input (|x|). For that we have to handle two cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x &gt;= 0&lt;/li&gt;
&lt;li&gt;x &amp;#x3C; 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To do this, we need functions to &lt;em&gt;control the flow of the program&lt;/em&gt;. In this case, we use the &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt;-function.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scheme&quot;&gt;&lt;pre class=&quot;language-scheme&quot;&gt;&lt;code class=&quot;language-scheme&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;my-abs&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; x &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    x
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt;-function takes three arguments. The first one has to be a &lt;strong&gt;boolean&lt;/strong&gt;. If that equals &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;, it returns the second argument, otherwise it returns the third one. We &lt;strong&gt;always&lt;/strong&gt; have to give three arguments, so the “else”-case is not optional.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;=&lt;/code&gt; is pretty self explanatory. It takes two numbers. If the first one is greater or equals the second one, it returns &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;, else it returns &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Now that we know some basics, let’s implement a simple calculater. It takes an operator symbol and two numbers and calulates the result based on the operator. To compare two symbols, we can use the &lt;code class=&quot;language-text&quot;&gt;symbol=?&lt;/code&gt;-function that returns true, iff both symbols are the same. We could implement this using &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; like before, but that would result in a lot of hard to read code. Instead, we will use &lt;code class=&quot;language-text&quot;&gt;cond&lt;/code&gt;. &lt;code class=&quot;language-text&quot;&gt;cond&lt;/code&gt; is somewhat similiar to &lt;code class=&quot;language-text&quot;&gt;switch&lt;/code&gt;-statements in other languages, like Java. It goes through all the cases we give it and if one’s condition is true, it will return this cases expression. A case is written as &lt;code class=&quot;language-text&quot;&gt;[condition expression]&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scheme&quot;&gt;&lt;pre class=&quot;language-scheme&quot;&gt;&lt;code class=&quot;language-scheme&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;simple-calculator&lt;/span&gt; op left-op right-op&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;cond&lt;/span&gt;
    [&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;symbol=?&lt;/span&gt; op &lt;span class=&quot;token string&quot;&gt;&apos;+)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; left-op right-op&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;]
    [&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;symbol=?&lt;/span&gt; op &lt;span class=&quot;token string&quot;&gt;&apos;-)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; left-op right-op&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;]
    [&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;symbol=?&lt;/span&gt; op &lt;span class=&quot;token string&quot;&gt;&apos;*)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; left-op right-op&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;]
    [&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;symbol=?&lt;/span&gt; op &lt;span class=&quot;token string&quot;&gt;&apos;/)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; left-op right-op&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;]
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;simple-calculator&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;simple-calculator&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Introduction to Racket]]></title><description><![CDATA[The Basics CONFUSING When I say “Racket” here, I actually mean HtDP-TL (or  H ow  t o  D esign -  T eaching  L anguage). But no one likes to…]]></description><link>https://DerDrodt.github.io//fop/racket-intro/</link><guid isPermaLink="false">https://DerDrodt.github.io//fop/racket-intro/</guid><pubDate>Mon, 03 Dec 2018 22:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;div class=&quot;custom-block custom-block-warning&quot;&gt;&lt;div class=&quot;custom-block-heading&quot;&gt;CONFUSING&lt;/div&gt;&lt;div class=&quot;custom-block-body&quot;&gt;&lt;p&gt;When I say “Racket” here, I actually mean HtDP-TL (or &lt;strong&gt;H&lt;/strong&gt;ow &lt;strong&gt;t&lt;/strong&gt;o &lt;strong&gt;D&lt;/strong&gt;esign - &lt;strong&gt;T&lt;/strong&gt;eaching &lt;strong&gt;L&lt;/strong&gt;anguage). But no one likes to say, hear, or in fact read that, obviously. And since HtDP-TL and Racket are quite similiar and everyone calls it Racket anyway, I am sticking with that.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Racket is a &lt;em&gt;functional programming language&lt;/em&gt;, which means that in Racket (almost) everything we do is through functions.&lt;/p&gt;
&lt;p&gt;Let’s say, for example, we want to calculate &lt;code class=&quot;language-text&quot;&gt;2 + 3&lt;/code&gt; in Racket, becuase that task is obviously way too complex to do it by hand. We &lt;strong&gt;can’t&lt;/strong&gt; just write &lt;code class=&quot;language-text&quot;&gt;2 + 3&lt;/code&gt; because Racket wouldn’t understand that. &lt;code class=&quot;language-text&quot;&gt;+&lt;/code&gt; however is a &lt;em&gt;function&lt;/em&gt;, which means we can &lt;em&gt;call&lt;/em&gt; it. &lt;em&gt;Calling&lt;/em&gt; a function means that we let the function do its calculation and then get its result back. For that calculation functions often need data to do these calculations, numbers to add for example. These data is what we call &lt;em&gt;parameters&lt;/em&gt; or &lt;em&gt;arguments&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To calculate &lt;code class=&quot;language-text&quot;&gt;2 + 3&lt;/code&gt; we call the &lt;code class=&quot;language-text&quot;&gt;+&lt;/code&gt;-function with 2 and 3 as parameters. Calling a function in Racket looks like this: &lt;code class=&quot;language-text&quot;&gt;(name param1 param2 ...)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scheme&quot;&gt;&lt;pre class=&quot;language-scheme&quot;&gt;&lt;code class=&quot;language-scheme&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what just happened there? We called a function with the name &lt;code class=&quot;language-text&quot;&gt;+&lt;/code&gt;, which is predefined in the Racket language, with the parameters 2 and 3. This function then calculated this addition and &lt;em&gt;returned&lt;/em&gt; it, meaning it gave us the result back.&lt;/p&gt;
&lt;p&gt;And &lt;code class=&quot;language-text&quot;&gt;+&lt;/code&gt; isn’t the only function Racket gives us right out of the box. There are a lot of them and we will explore a lot of them later, but here are some arithmetic functions:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scheme&quot;&gt;&lt;pre class=&quot;language-scheme&quot;&gt;&lt;code class=&quot;language-scheme&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Okay, so we know what functions are. Great! But are there other things in Racket? We already used numbers, is there more? And what’s the difference between functions and other things?&lt;/p&gt;
&lt;h2&gt;Primitives and Expressions&lt;/h2&gt;
&lt;p&gt;In Racket (and most other languages) we have &lt;em&gt;primitives&lt;/em&gt;. Primitives are &lt;em&gt;expressions&lt;/em&gt; that are their own value. The number &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt; for example &lt;strong&gt;is&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt;. That is it’s value and how it represented and used. Functions however are not their own value, we have to &lt;em&gt;evaulate&lt;/em&gt; them to get it.&lt;/p&gt;
&lt;p&gt;There are other primitives in Racket, like booleans, strings and symbols. Booleans are either &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; (short: &lt;code class=&quot;language-text&quot;&gt;#t&lt;/code&gt;) or &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt; (short: &lt;code class=&quot;language-text&quot;&gt;#f&lt;/code&gt;). Strings are basically text, like &lt;code class=&quot;language-text&quot;&gt;&amp;quot;This is my text.&amp;quot;&lt;/code&gt; and symbols, like &lt;code class=&quot;language-text&quot;&gt;&amp;#39;cat&lt;/code&gt; are somewhat similiar to strings, but can’t have whitespace and are easier to compare.&lt;/p&gt;
&lt;p&gt;We will explore all of these in more detail later and use all of them in examples, so you can familiarize with them.&lt;/p&gt;
&lt;p&gt;In the next part, we will dive deep into functions.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Introduction to FoP]]></title><description><![CDATA[In this series of blog posts, we will examine and learn the contents of the basics of the lecture “Funktionale und objektorientierte…]]></description><link>https://DerDrodt.github.io//fop/fop-intro/</link><guid isPermaLink="false">https://DerDrodt.github.io//fop/fop-intro/</guid><pubDate>Sun, 02 Dec 2018 21:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In this series of blog posts, we will examine and learn the contents of the basics of the lecture “Funktionale und objektorientierte Programmierkonzepte” from the TU Darmstadt.&lt;/p&gt;
&lt;div class=&quot;custom-block custom-block-warning&quot;&gt;&lt;div class=&quot;custom-block-heading&quot;&gt;DISCLAIMER&lt;/div&gt;&lt;div class=&quot;custom-block-body&quot;&gt;&lt;p&gt;This series is in no way official and there are no guarantees that it is 100% correct nor conform with the lecture contents. It is only intended to further explain the languages used in FoP, namely Java and Racket and the concepts introduced.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We will first begin to explain the functional language Racket, will then go over to Java and end with comparing the two. Along the way, we will learn common best practices, styles and methods in programming and learn how to best avoid mistakes.&lt;/p&gt;</content:encoded></item></channel></rss>